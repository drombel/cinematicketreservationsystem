<?php

namespace AppBundle\Controller;

use AppBundle\Entity\MovieImages;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

/**
 * Movieimage controller.
 *
 * @Route("movieimages")
 */
class MovieImagesController extends Controller
{
    /**
     * Lists all movieImage entities.
     *
     * @Route("/", name="movieimages_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $movieImages = $em->getRepository('AppBundle:MovieImages')->findAll();

        return $this->render('movieimages/index.html.twig', array(
            'movieImages' => $movieImages,
        ));
    }

    /**
     * Creates a new movieImage entity.
     *
     * @Route("/new", name="movieimages_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $movieImage = new MovieImages();
        $form = $this->createForm('AppBundle\Form\MovieImagesType', $movieImage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $this->setImages($movieImage);

            $em = $this->getDoctrine()->getManager();
            $em->persist($movieImage);
            $em->flush();

            return $this->redirectToRoute('movieimages_show', array('id' => $movieImage->getId()));
        }

        return $this->render('movieimages/new.html.twig', array(
            'movieImage' => $movieImage,
            'form' => $form->createView(),
        ));
    }

    /**
     * Finds and displays a movieImage entity.
     *
     * @Route("/{id}", name="movieimages_show")
     * @Method("GET")
     */
    public function showAction(MovieImages $movieImage)
    {
        $deleteForm = $this->createDeleteForm($movieImage);

        return $this->render('movieimages/show.html.twig', array(
            'movieImage' => $movieImage,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing movieImage entity.
     *
     * @Route("/{id}/edit", name="movieimages_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, MovieImages $movieImage)
    {
        $deleteForm = $this->createDeleteForm($movieImage);
        $images = $this->getImages($movieImage);

        //$file = new File($this->getParameter('post_directory') . '/' . $post->getBody());
        //$post->setBody($file);

        $editForm = $this->createForm('AppBundle\Form\MovieImagesType', $movieImage);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('movieimages_edit', array('id' => $movieImage->getId()));
        }

        return $this->render('movieimages/edit.html.twig', array(
            'movieImage' => $movieImage,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a movieImage entity.
     *
     * @Route("/{id}", name="movieimages_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, MovieImages $movieImage)
    {
        $form = $this->createDeleteForm($movieImage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($movieImage);
            $em->flush();
        }

        return $this->redirectToRoute('movieimages_index');
    }

    /**
     * Creates a form to delete a movieImage entity.
     *
     * @param MovieImages $movieImage The movieImage entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(MovieImages $movieImage)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('movieimages_delete', array('id' => $movieImage->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    private function getImages($movieImage){
        $images = [
            'orginal'   =>[
                'file'=>$movieImage->getOrginal(),
                'directory'=>$this->getParameter('movie_images_orginal_directory')
            ],
            'extra'     =>[
                'file'=>$movieImage->getExtra(),
                'directory'=>$this->getParameter('movie_images_extra_directory')
            ],
            'large'     =>[
                'file'=>$movieImage->getLarge(),
                'directory'=>$this->getParameter('movie_images_large_directory')
            ],
            'normal'    =>[
                'file'=>$movieImage->getNormal(),
                'directory'=>$this->getParameter('movie_images_normal_directory')
            ],
            'small'     =>[
                'file'=>$movieImage->getSmall(),
                'directory'=>$this->getParameter('movie_images_small_directory')
            ],
        ];
        foreach ($images as $key => $image){
            if($image['file'])
                $images[$key]['fileName'] = $this->generateUniqueFileName().'.'.$image['file']->guessExtension();
        }

        return $images;
    }

    private function setImages(&$movieImage){
        $images = $this->getImages($movieImage);
        try {
            foreach ($images as $image){
                if($image['file'])
                    $image['file']->move($image['directory'],$image['fileName']);
            }
        } catch (FileException $e) {
            // If something went wrong during upload
        }
        if($images['orginal']['file'])
            $movieImage->setOrginal($images['orginal']['fileName']);
        if($images['extra']['file'])
            $movieImage->setExtra($images['extra']['fileName']);
        if($images['large']['file'])
            $movieImage->setLarge($images['large']['fileName']);
        if($images['normal']['file'])
            $movieImage->setNormal($images['normal']['fileName']);
        if($images['small']['file'])
            $movieImage->setSmall($images['small']['fileName']);
    }
}
